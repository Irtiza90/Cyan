statements : NEWLINE* expr (NEWLINE+ expr)*

expr       : KW:let IDENTIFIER EQ expr
           : comp-expr ((KW:and|KW:or) comp-expr)*

comp-expr  : arith-expr ((EE|NE|GT|LT|GTE|LTE) arith-expr)*

arith-expr : NOT comp-expr
           : term ((PLUS | MINUS) term)*

term       : factor ((MUL | DIV) factor)*

factor     : (PLUS | MINUS) factor
           : power

power      : call (POW factor)*

call       : atom IDENTIFIER? (L_PAREN (expr (COMMA expr)*)? R_PAREN)?

atom       : INT | FLOAT | IDENTIFIER | LITERAL
           : STRING
           : L_PAREN expr R_PAREN
           : if-expr
           : while-expr
           : func-def

if-expr    : KW:if comp-expr KW:then expr KW:else expr

while-expr : KW:while comp-expr L_CPAREN expr R_CPAREN

func-def   : KW:fun L_PAREN (IDENTIFIER (COMMA IDENTIFIER)*)? R_PAREN COLON expr
